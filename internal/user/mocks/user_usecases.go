// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecases is an autogenerated mock type for the UserUsecases type
type UserUsecases struct {
	mock.Mock
}

type UserUsecases_Expecter struct {
	mock *mock.Mock
}

func (_m *UserUsecases) EXPECT() *UserUsecases_Expecter {
	return &UserUsecases_Expecter{mock: &_m.Mock}
}

// AuthenticateUser provides a mock function with given fields: ctx, login, password
func (_m *UserUsecases) AuthenticateUser(ctx context.Context, login string, password []byte) error {
	ret := _m.Called(ctx, login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecases_AuthenticateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateUser'
type UserUsecases_AuthenticateUser_Call struct {
	*mock.Call
}

// AuthenticateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password []byte
func (_e *UserUsecases_Expecter) AuthenticateUser(ctx interface{}, login interface{}, password interface{}) *UserUsecases_AuthenticateUser_Call {
	return &UserUsecases_AuthenticateUser_Call{Call: _e.mock.On("AuthenticateUser", ctx, login, password)}
}

func (_c *UserUsecases_AuthenticateUser_Call) Run(run func(ctx context.Context, login string, password []byte)) *UserUsecases_AuthenticateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *UserUsecases_AuthenticateUser_Call) Return(_a0 error) *UserUsecases_AuthenticateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecases_AuthenticateUser_Call) RunAndReturn(run func(context.Context, string, []byte) error) *UserUsecases_AuthenticateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, login, password
func (_m *UserUsecases) CreateUser(ctx context.Context, login string, password []byte) error {
	ret := _m.Called(ctx, login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserUsecases_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserUsecases_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password []byte
func (_e *UserUsecases_Expecter) CreateUser(ctx interface{}, login interface{}, password interface{}) *UserUsecases_CreateUser_Call {
	return &UserUsecases_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, login, password)}
}

func (_c *UserUsecases_CreateUser_Call) Run(run func(ctx context.Context, login string, password []byte)) *UserUsecases_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *UserUsecases_CreateUser_Call) Return(_a0 error) *UserUsecases_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserUsecases_CreateUser_Call) RunAndReturn(run func(context.Context, string, []byte) error) *UserUsecases_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserUsecases creates a new instance of UserUsecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecases(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecases {
	mock := &UserUsecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
