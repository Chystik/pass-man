// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: password
func (_m *User) Authenticate(password []byte) error {
	ret := _m.Called(password)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type User_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - password []byte
func (_e *User_Expecter) Authenticate(password interface{}) *User_Authenticate_Call {
	return &User_Authenticate_Call{Call: _e.mock.On("Authenticate", password)}
}

func (_c *User_Authenticate_Call) Run(run func(password []byte)) *User_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *User_Authenticate_Call) Return(_a0 error) *User_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_Authenticate_Call) RunAndReturn(run func([]byte) error) *User_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// GetVaultKey provides a mock function with given fields: vaultPassword
func (_m *User) GetVaultKey(vaultPassword []byte) ([]byte, error) {
	ret := _m.Called(vaultPassword)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(vaultPassword)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(vaultPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(vaultPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetVaultKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVaultKey'
type User_GetVaultKey_Call struct {
	*mock.Call
}

// GetVaultKey is a helper method to define mock.On call
//   - vaultPassword []byte
func (_e *User_Expecter) GetVaultKey(vaultPassword interface{}) *User_GetVaultKey_Call {
	return &User_GetVaultKey_Call{Call: _e.mock.On("GetVaultKey", vaultPassword)}
}

func (_c *User_GetVaultKey_Call) Run(run func(vaultPassword []byte)) *User_GetVaultKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *User_GetVaultKey_Call) Return(_a0 []byte, _a1 error) *User_GetVaultKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_GetVaultKey_Call) RunAndReturn(run func([]byte) ([]byte, error)) *User_GetVaultKey_Call {
	_c.Call.Return(run)
	return _c
}

// SetPassword provides a mock function with given fields: password
func (_m *User) SetPassword(password []byte) error {
	ret := _m.Called(password)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_SetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPassword'
type User_SetPassword_Call struct {
	*mock.Call
}

// SetPassword is a helper method to define mock.On call
//   - password []byte
func (_e *User_Expecter) SetPassword(password interface{}) *User_SetPassword_Call {
	return &User_SetPassword_Call{Call: _e.mock.On("SetPassword", password)}
}

func (_c *User_SetPassword_Call) Run(run func(password []byte)) *User_SetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *User_SetPassword_Call) Return(_a0 error) *User_SetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_SetPassword_Call) RunAndReturn(run func([]byte) error) *User_SetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// SetVaultKey provides a mock function with given fields: vaultPassword
func (_m *User) SetVaultKey(vaultPassword []byte) error {
	ret := _m.Called(vaultPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(vaultPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_SetVaultKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVaultKey'
type User_SetVaultKey_Call struct {
	*mock.Call
}

// SetVaultKey is a helper method to define mock.On call
//   - vaultPassword []byte
func (_e *User_Expecter) SetVaultKey(vaultPassword interface{}) *User_SetVaultKey_Call {
	return &User_SetVaultKey_Call{Call: _e.mock.On("SetVaultKey", vaultPassword)}
}

func (_c *User_SetVaultKey_Call) Run(run func(vaultPassword []byte)) *User_SetVaultKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *User_SetVaultKey_Call) Return(_a0 error) *User_SetVaultKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_SetVaultKey_Call) RunAndReturn(run func([]byte) error) *User_SetVaultKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
