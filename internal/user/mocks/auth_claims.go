// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AuthClaims is an autogenerated mock type for the AuthClaims type
type AuthClaims struct {
	mock.Mock
}

type AuthClaims_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthClaims) EXPECT() *AuthClaims_Expecter {
	return &AuthClaims_Expecter{mock: &_m.Mock}
}

// AuthorizeUser provides a mock function with given fields: jwtKey
func (_m *AuthClaims) AuthorizeUser(jwtKey []byte) (string, error) {
	ret := _m.Called(jwtKey)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (string, error)); ok {
		return rf(jwtKey)
	}
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(jwtKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(jwtKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthClaims_AuthorizeUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeUser'
type AuthClaims_AuthorizeUser_Call struct {
	*mock.Call
}

// AuthorizeUser is a helper method to define mock.On call
//   - jwtKey []byte
func (_e *AuthClaims_Expecter) AuthorizeUser(jwtKey interface{}) *AuthClaims_AuthorizeUser_Call {
	return &AuthClaims_AuthorizeUser_Call{Call: _e.mock.On("AuthorizeUser", jwtKey)}
}

func (_c *AuthClaims_AuthorizeUser_Call) Run(run func(jwtKey []byte)) *AuthClaims_AuthorizeUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *AuthClaims_AuthorizeUser_Call) Return(_a0 string, _a1 error) *AuthClaims_AuthorizeUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthClaims_AuthorizeUser_Call) RunAndReturn(run func([]byte) (string, error)) *AuthClaims_AuthorizeUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthClaims creates a new instance of AuthClaims. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthClaims(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthClaims {
	mock := &AuthClaims{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
