// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Chystik/pass-man/internal/user/entities"
	mock "github.com/stretchr/testify/mock"
)

// UserAPIClient is an autogenerated mock type for the UserAPIClient type
type UserAPIClient struct {
	mock.Mock
}

type UserAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *UserAPIClient) EXPECT() *UserAPIClient_Expecter {
	return &UserAPIClient_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, login, password
func (_m *UserAPIClient) Login(ctx context.Context, login string, password []byte) (entities.JWTtoken, error) {
	ret := _m.Called(ctx, login, password)

	var r0 entities.JWTtoken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (entities.JWTtoken, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) entities.JWTtoken); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(entities.JWTtoken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAPIClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserAPIClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password []byte
func (_e *UserAPIClient_Expecter) Login(ctx interface{}, login interface{}, password interface{}) *UserAPIClient_Login_Call {
	return &UserAPIClient_Login_Call{Call: _e.mock.On("Login", ctx, login, password)}
}

func (_c *UserAPIClient_Login_Call) Run(run func(ctx context.Context, login string, password []byte)) *UserAPIClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *UserAPIClient_Login_Call) Return(_a0 entities.JWTtoken, _a1 error) *UserAPIClient_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserAPIClient_Login_Call) RunAndReturn(run func(context.Context, string, []byte) (entities.JWTtoken, error)) *UserAPIClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, login, password
func (_m *UserAPIClient) SignUp(ctx context.Context, login string, password []byte) (entities.JWTtoken, error) {
	ret := _m.Called(ctx, login, password)

	var r0 entities.JWTtoken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) (entities.JWTtoken, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) entities.JWTtoken); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(entities.JWTtoken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAPIClient_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type UserAPIClient_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - password []byte
func (_e *UserAPIClient_Expecter) SignUp(ctx interface{}, login interface{}, password interface{}) *UserAPIClient_SignUp_Call {
	return &UserAPIClient_SignUp_Call{Call: _e.mock.On("SignUp", ctx, login, password)}
}

func (_c *UserAPIClient_SignUp_Call) Run(run func(ctx context.Context, login string, password []byte)) *UserAPIClient_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *UserAPIClient_SignUp_Call) Return(_a0 entities.JWTtoken, _a1 error) *UserAPIClient_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserAPIClient_SignUp_Call) RunAndReturn(run func(context.Context, string, []byte) (entities.JWTtoken, error)) *UserAPIClient_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserAPIClient creates a new instance of UserAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAPIClient {
	mock := &UserAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
