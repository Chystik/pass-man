// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Chystik/pass-man/internal/vault/card/entities"
	mock "github.com/stretchr/testify/mock"
)

// CardAPIClient is an autogenerated mock type for the CardAPIClient type
type CardAPIClient struct {
	mock.Mock
}

type CardAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CardAPIClient) EXPECT() *CardAPIClient_Expecter {
	return &CardAPIClient_Expecter{mock: &_m.Mock}
}

// AddCard provides a mock function with given fields: ctx, card
func (_m *CardAPIClient) AddCard(ctx context.Context, card entities.Card) error {
	ret := _m.Called(ctx, card)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardAPIClient_AddCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCard'
type CardAPIClient_AddCard_Call struct {
	*mock.Call
}

// AddCard is a helper method to define mock.On call
//   - ctx context.Context
//   - card entities.Card
func (_e *CardAPIClient_Expecter) AddCard(ctx interface{}, card interface{}) *CardAPIClient_AddCard_Call {
	return &CardAPIClient_AddCard_Call{Call: _e.mock.On("AddCard", ctx, card)}
}

func (_c *CardAPIClient_AddCard_Call) Run(run func(ctx context.Context, card entities.Card)) *CardAPIClient_AddCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Card))
	})
	return _c
}

func (_c *CardAPIClient_AddCard_Call) Return(_a0 error) *CardAPIClient_AddCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardAPIClient_AddCard_Call) RunAndReturn(run func(context.Context, entities.Card) error) *CardAPIClient_AddCard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCard provides a mock function with given fields: ctx, meta
func (_m *CardAPIClient) DeleteCard(ctx context.Context, meta string) error {
	ret := _m.Called(ctx, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CardAPIClient_DeleteCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCard'
type CardAPIClient_DeleteCard_Call struct {
	*mock.Call
}

// DeleteCard is a helper method to define mock.On call
//   - ctx context.Context
//   - meta string
func (_e *CardAPIClient_Expecter) DeleteCard(ctx interface{}, meta interface{}) *CardAPIClient_DeleteCard_Call {
	return &CardAPIClient_DeleteCard_Call{Call: _e.mock.On("DeleteCard", ctx, meta)}
}

func (_c *CardAPIClient_DeleteCard_Call) Run(run func(ctx context.Context, meta string)) *CardAPIClient_DeleteCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CardAPIClient_DeleteCard_Call) Return(_a0 error) *CardAPIClient_DeleteCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CardAPIClient_DeleteCard_Call) RunAndReturn(run func(context.Context, string) error) *CardAPIClient_DeleteCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCard provides a mock function with given fields: ctx, meta
func (_m *CardAPIClient) GetCard(ctx context.Context, meta string) (entities.Card, error) {
	ret := _m.Called(ctx, meta)

	var r0 entities.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Card, error)); ok {
		return rf(ctx, meta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Card); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Get(0).(entities.Card)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardAPIClient_GetCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCard'
type CardAPIClient_GetCard_Call struct {
	*mock.Call
}

// GetCard is a helper method to define mock.On call
//   - ctx context.Context
//   - meta string
func (_e *CardAPIClient_Expecter) GetCard(ctx interface{}, meta interface{}) *CardAPIClient_GetCard_Call {
	return &CardAPIClient_GetCard_Call{Call: _e.mock.On("GetCard", ctx, meta)}
}

func (_c *CardAPIClient_GetCard_Call) Run(run func(ctx context.Context, meta string)) *CardAPIClient_GetCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CardAPIClient_GetCard_Call) Return(_a0 entities.Card, _a1 error) *CardAPIClient_GetCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardAPIClient_GetCard_Call) RunAndReturn(run func(context.Context, string) (entities.Card, error)) *CardAPIClient_GetCard_Call {
	_c.Call.Return(run)
	return _c
}

// ListCard provides a mock function with given fields: ctx
func (_m *CardAPIClient) ListCard(ctx context.Context) ([]entities.Card, error) {
	ret := _m.Called(ctx)

	var r0 []entities.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Card, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Card); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardAPIClient_ListCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCard'
type CardAPIClient_ListCard_Call struct {
	*mock.Call
}

// ListCard is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CardAPIClient_Expecter) ListCard(ctx interface{}) *CardAPIClient_ListCard_Call {
	return &CardAPIClient_ListCard_Call{Call: _e.mock.On("ListCard", ctx)}
}

func (_c *CardAPIClient_ListCard_Call) Run(run func(ctx context.Context)) *CardAPIClient_ListCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CardAPIClient_ListCard_Call) Return(_a0 []entities.Card, _a1 error) *CardAPIClient_ListCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardAPIClient_ListCard_Call) RunAndReturn(run func(context.Context) ([]entities.Card, error)) *CardAPIClient_ListCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardAPIClient creates a new instance of CardAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardAPIClient {
	mock := &CardAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
