// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Chystik/pass-man/internal/vault/file/entities"
	mock "github.com/stretchr/testify/mock"
)

// FileAPIClient is an autogenerated mock type for the FileAPIClient type
type FileAPIClient struct {
	mock.Mock
}

type FileAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FileAPIClient) EXPECT() *FileAPIClient_Expecter {
	return &FileAPIClient_Expecter{mock: &_m.Mock}
}

// DeleteFile provides a mock function with given fields: ctx, file
func (_m *FileAPIClient) DeleteFile(ctx context.Context, file *entities.File) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileAPIClient_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type FileAPIClient_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - file *entities.File
func (_e *FileAPIClient_Expecter) DeleteFile(ctx interface{}, file interface{}) *FileAPIClient_DeleteFile_Call {
	return &FileAPIClient_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, file)}
}

func (_c *FileAPIClient_DeleteFile_Call) Run(run func(ctx context.Context, file *entities.File)) *FileAPIClient_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.File))
	})
	return _c
}

func (_c *FileAPIClient_DeleteFile_Call) Return(_a0 error) *FileAPIClient_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileAPIClient_DeleteFile_Call) RunAndReturn(run func(context.Context, *entities.File) error) *FileAPIClient_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFile provides a mock function with given fields: ctx, file, filePath
func (_m *FileAPIClient) DownloadFile(ctx context.Context, file *entities.File, filePath string) error {
	ret := _m.Called(ctx, file, filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.File, string) error); ok {
		r0 = rf(ctx, file, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileAPIClient_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type FileAPIClient_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - file *entities.File
//   - filePath string
func (_e *FileAPIClient_Expecter) DownloadFile(ctx interface{}, file interface{}, filePath interface{}) *FileAPIClient_DownloadFile_Call {
	return &FileAPIClient_DownloadFile_Call{Call: _e.mock.On("DownloadFile", ctx, file, filePath)}
}

func (_c *FileAPIClient_DownloadFile_Call) Run(run func(ctx context.Context, file *entities.File, filePath string)) *FileAPIClient_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.File), args[2].(string))
	})
	return _c
}

func (_c *FileAPIClient_DownloadFile_Call) Return(_a0 error) *FileAPIClient_DownloadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileAPIClient_DownloadFile_Call) RunAndReturn(run func(context.Context, *entities.File, string) error) *FileAPIClient_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function with given fields: ctx
func (_m *FileAPIClient) ListFiles(ctx context.Context) ([]*entities.File, error) {
	ret := _m.Called(ctx)

	var r0 []*entities.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entities.File, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.File); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileAPIClient_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type FileAPIClient_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FileAPIClient_Expecter) ListFiles(ctx interface{}) *FileAPIClient_ListFiles_Call {
	return &FileAPIClient_ListFiles_Call{Call: _e.mock.On("ListFiles", ctx)}
}

func (_c *FileAPIClient_ListFiles_Call) Run(run func(ctx context.Context)) *FileAPIClient_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FileAPIClient_ListFiles_Call) Return(_a0 []*entities.File, _a1 error) *FileAPIClient_ListFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileAPIClient_ListFiles_Call) RunAndReturn(run func(context.Context) ([]*entities.File, error)) *FileAPIClient_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: ctx, file, filePath
func (_m *FileAPIClient) UploadFile(ctx context.Context, file *entities.File, filePath string) error {
	ret := _m.Called(ctx, file, filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.File, string) error); ok {
		r0 = rf(ctx, file, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileAPIClient_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type FileAPIClient_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - file *entities.File
//   - filePath string
func (_e *FileAPIClient_Expecter) UploadFile(ctx interface{}, file interface{}, filePath interface{}) *FileAPIClient_UploadFile_Call {
	return &FileAPIClient_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, file, filePath)}
}

func (_c *FileAPIClient_UploadFile_Call) Run(run func(ctx context.Context, file *entities.File, filePath string)) *FileAPIClient_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.File), args[2].(string))
	})
	return _c
}

func (_c *FileAPIClient_UploadFile_Call) Return(_a0 error) *FileAPIClient_UploadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileAPIClient_UploadFile_Call) RunAndReturn(run func(context.Context, *entities.File, string) error) *FileAPIClient_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileAPIClient creates a new instance of FileAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileAPIClient {
	mock := &FileAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
