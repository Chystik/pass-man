// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Chystik/pass-man/internal/vault/note/entities"
	mock "github.com/stretchr/testify/mock"
)

// NoteAPIClient is an autogenerated mock type for the NoteAPIClient type
type NoteAPIClient struct {
	mock.Mock
}

type NoteAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteAPIClient) EXPECT() *NoteAPIClient_Expecter {
	return &NoteAPIClient_Expecter{mock: &_m.Mock}
}

// AddNote provides a mock function with given fields: ctx, note
func (_m *NoteAPIClient) AddNote(ctx context.Context, note entities.Note) error {
	ret := _m.Called(ctx, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteAPIClient_AddNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNote'
type NoteAPIClient_AddNote_Call struct {
	*mock.Call
}

// AddNote is a helper method to define mock.On call
//   - ctx context.Context
//   - note entities.Note
func (_e *NoteAPIClient_Expecter) AddNote(ctx interface{}, note interface{}) *NoteAPIClient_AddNote_Call {
	return &NoteAPIClient_AddNote_Call{Call: _e.mock.On("AddNote", ctx, note)}
}

func (_c *NoteAPIClient_AddNote_Call) Run(run func(ctx context.Context, note entities.Note)) *NoteAPIClient_AddNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Note))
	})
	return _c
}

func (_c *NoteAPIClient_AddNote_Call) Return(_a0 error) *NoteAPIClient_AddNote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteAPIClient_AddNote_Call) RunAndReturn(run func(context.Context, entities.Note) error) *NoteAPIClient_AddNote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNote provides a mock function with given fields: ctx, meta
func (_m *NoteAPIClient) DeleteNote(ctx context.Context, meta string) error {
	ret := _m.Called(ctx, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NoteAPIClient_DeleteNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNote'
type NoteAPIClient_DeleteNote_Call struct {
	*mock.Call
}

// DeleteNote is a helper method to define mock.On call
//   - ctx context.Context
//   - meta string
func (_e *NoteAPIClient_Expecter) DeleteNote(ctx interface{}, meta interface{}) *NoteAPIClient_DeleteNote_Call {
	return &NoteAPIClient_DeleteNote_Call{Call: _e.mock.On("DeleteNote", ctx, meta)}
}

func (_c *NoteAPIClient_DeleteNote_Call) Run(run func(ctx context.Context, meta string)) *NoteAPIClient_DeleteNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NoteAPIClient_DeleteNote_Call) Return(_a0 error) *NoteAPIClient_DeleteNote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NoteAPIClient_DeleteNote_Call) RunAndReturn(run func(context.Context, string) error) *NoteAPIClient_DeleteNote_Call {
	_c.Call.Return(run)
	return _c
}

// GetNote provides a mock function with given fields: ctx, meta
func (_m *NoteAPIClient) GetNote(ctx context.Context, meta string) (entities.Note, error) {
	ret := _m.Called(ctx, meta)

	var r0 entities.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Note, error)); ok {
		return rf(ctx, meta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Note); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Get(0).(entities.Note)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteAPIClient_GetNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNote'
type NoteAPIClient_GetNote_Call struct {
	*mock.Call
}

// GetNote is a helper method to define mock.On call
//   - ctx context.Context
//   - meta string
func (_e *NoteAPIClient_Expecter) GetNote(ctx interface{}, meta interface{}) *NoteAPIClient_GetNote_Call {
	return &NoteAPIClient_GetNote_Call{Call: _e.mock.On("GetNote", ctx, meta)}
}

func (_c *NoteAPIClient_GetNote_Call) Run(run func(ctx context.Context, meta string)) *NoteAPIClient_GetNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NoteAPIClient_GetNote_Call) Return(_a0 entities.Note, _a1 error) *NoteAPIClient_GetNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteAPIClient_GetNote_Call) RunAndReturn(run func(context.Context, string) (entities.Note, error)) *NoteAPIClient_GetNote_Call {
	_c.Call.Return(run)
	return _c
}

// ListNote provides a mock function with given fields: ctx
func (_m *NoteAPIClient) ListNote(ctx context.Context) ([]entities.Note, error) {
	ret := _m.Called(ctx)

	var r0 []entities.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Note, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Note); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Note)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteAPIClient_ListNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNote'
type NoteAPIClient_ListNote_Call struct {
	*mock.Call
}

// ListNote is a helper method to define mock.On call
//   - ctx context.Context
func (_e *NoteAPIClient_Expecter) ListNote(ctx interface{}) *NoteAPIClient_ListNote_Call {
	return &NoteAPIClient_ListNote_Call{Call: _e.mock.On("ListNote", ctx)}
}

func (_c *NoteAPIClient_ListNote_Call) Run(run func(ctx context.Context)) *NoteAPIClient_ListNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *NoteAPIClient_ListNote_Call) Return(_a0 []entities.Note, _a1 error) *NoteAPIClient_ListNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteAPIClient_ListNote_Call) RunAndReturn(run func(context.Context) ([]entities.Note, error)) *NoteAPIClient_ListNote_Call {
	_c.Call.Return(run)
	return _c
}

// NewNoteAPIClient creates a new instance of NoteAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteAPIClient {
	mock := &NoteAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
