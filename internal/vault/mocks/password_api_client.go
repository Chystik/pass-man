// Code generated by mockery v2.23.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/Chystik/pass-man/internal/vault/password/entities"
	mock "github.com/stretchr/testify/mock"
)

// PasswordAPIClient is an autogenerated mock type for the PasswordAPIClient type
type PasswordAPIClient struct {
	mock.Mock
}

type PasswordAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordAPIClient) EXPECT() *PasswordAPIClient_Expecter {
	return &PasswordAPIClient_Expecter{mock: &_m.Mock}
}

// AddPassword provides a mock function with given fields: ctx, password
func (_m *PasswordAPIClient) AddPassword(ctx context.Context, password entities.Password) error {
	ret := _m.Called(ctx, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Password) error); ok {
		r0 = rf(ctx, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordAPIClient_AddPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPassword'
type PasswordAPIClient_AddPassword_Call struct {
	*mock.Call
}

// AddPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - password entities.Password
func (_e *PasswordAPIClient_Expecter) AddPassword(ctx interface{}, password interface{}) *PasswordAPIClient_AddPassword_Call {
	return &PasswordAPIClient_AddPassword_Call{Call: _e.mock.On("AddPassword", ctx, password)}
}

func (_c *PasswordAPIClient_AddPassword_Call) Run(run func(ctx context.Context, password entities.Password)) *PasswordAPIClient_AddPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Password))
	})
	return _c
}

func (_c *PasswordAPIClient_AddPassword_Call) Return(_a0 error) *PasswordAPIClient_AddPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordAPIClient_AddPassword_Call) RunAndReturn(run func(context.Context, entities.Password) error) *PasswordAPIClient_AddPassword_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePassword provides a mock function with given fields: ctx, meta
func (_m *PasswordAPIClient) DeletePassword(ctx context.Context, meta string) error {
	ret := _m.Called(ctx, meta)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordAPIClient_DeletePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePassword'
type PasswordAPIClient_DeletePassword_Call struct {
	*mock.Call
}

// DeletePassword is a helper method to define mock.On call
//   - ctx context.Context
//   - meta string
func (_e *PasswordAPIClient_Expecter) DeletePassword(ctx interface{}, meta interface{}) *PasswordAPIClient_DeletePassword_Call {
	return &PasswordAPIClient_DeletePassword_Call{Call: _e.mock.On("DeletePassword", ctx, meta)}
}

func (_c *PasswordAPIClient_DeletePassword_Call) Run(run func(ctx context.Context, meta string)) *PasswordAPIClient_DeletePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PasswordAPIClient_DeletePassword_Call) Return(_a0 error) *PasswordAPIClient_DeletePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordAPIClient_DeletePassword_Call) RunAndReturn(run func(context.Context, string) error) *PasswordAPIClient_DeletePassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetPassword provides a mock function with given fields: ctx, meta
func (_m *PasswordAPIClient) GetPassword(ctx context.Context, meta string) (entities.Password, error) {
	ret := _m.Called(ctx, meta)

	var r0 entities.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Password, error)); ok {
		return rf(ctx, meta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Password); ok {
		r0 = rf(ctx, meta)
	} else {
		r0 = ret.Get(0).(entities.Password)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordAPIClient_GetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPassword'
type PasswordAPIClient_GetPassword_Call struct {
	*mock.Call
}

// GetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - meta string
func (_e *PasswordAPIClient_Expecter) GetPassword(ctx interface{}, meta interface{}) *PasswordAPIClient_GetPassword_Call {
	return &PasswordAPIClient_GetPassword_Call{Call: _e.mock.On("GetPassword", ctx, meta)}
}

func (_c *PasswordAPIClient_GetPassword_Call) Run(run func(ctx context.Context, meta string)) *PasswordAPIClient_GetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PasswordAPIClient_GetPassword_Call) Return(_a0 entities.Password, _a1 error) *PasswordAPIClient_GetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordAPIClient_GetPassword_Call) RunAndReturn(run func(context.Context, string) (entities.Password, error)) *PasswordAPIClient_GetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ListPassword provides a mock function with given fields: ctx
func (_m *PasswordAPIClient) ListPassword(ctx context.Context) ([]entities.Password, error) {
	ret := _m.Called(ctx)

	var r0 []entities.Password
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Password, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Password); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Password)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordAPIClient_ListPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPassword'
type PasswordAPIClient_ListPassword_Call struct {
	*mock.Call
}

// ListPassword is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PasswordAPIClient_Expecter) ListPassword(ctx interface{}) *PasswordAPIClient_ListPassword_Call {
	return &PasswordAPIClient_ListPassword_Call{Call: _e.mock.On("ListPassword", ctx)}
}

func (_c *PasswordAPIClient_ListPassword_Call) Run(run func(ctx context.Context)) *PasswordAPIClient_ListPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PasswordAPIClient_ListPassword_Call) Return(_a0 []entities.Password, _a1 error) *PasswordAPIClient_ListPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordAPIClient_ListPassword_Call) RunAndReturn(run func(context.Context) ([]entities.Password, error)) *PasswordAPIClient_ListPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordAPIClient creates a new instance of PasswordAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordAPIClient {
	mock := &PasswordAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
