// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/Chystik/pass-man/internal/infrastructure/grpc"
)

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

type UserServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceClient) EXPECT() *UserServiceClient_Expecter {
	return &UserServiceClient_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) Login(ctx context.Context, in *pb.LoginRequest, opts ...grpc.CallOption) (*pb.LoginResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *pb.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest, ...grpc.CallOption) (*pb.LoginResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest, ...grpc.CallOption) *pb.LoginResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserServiceClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.LoginRequest
//   - opts ...grpc.CallOption
func (_e *UserServiceClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *UserServiceClient_Login_Call {
	return &UserServiceClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserServiceClient_Login_Call) Run(run func(ctx context.Context, in *pb.LoginRequest, opts ...grpc.CallOption)) *UserServiceClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.LoginRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserServiceClient_Login_Call) Return(_a0 *pb.LoginResponse, _a1 error) *UserServiceClient_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceClient_Login_Call) RunAndReturn(run func(context.Context, *pb.LoginRequest, ...grpc.CallOption) (*pb.LoginResponse, error)) *UserServiceClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) SignUp(ctx context.Context, in *pb.SignUpRequest, opts ...grpc.CallOption) (*pb.SignUpResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 *pb.SignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignUpRequest, ...grpc.CallOption) (*pb.SignUpResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignUpRequest, ...grpc.CallOption) *pb.SignUpResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SignUpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignUpRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceClient_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type UserServiceClient_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.SignUpRequest
//   - opts ...grpc.CallOption
func (_e *UserServiceClient_Expecter) SignUp(ctx interface{}, in interface{}, opts ...interface{}) *UserServiceClient_SignUp_Call {
	return &UserServiceClient_SignUp_Call{Call: _e.mock.On("SignUp",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *UserServiceClient_SignUp_Call) Run(run func(ctx context.Context, in *pb.SignUpRequest, opts ...grpc.CallOption)) *UserServiceClient_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.SignUpRequest), variadicArgs...)
	})
	return _c
}

func (_c *UserServiceClient_SignUp_Call) Return(_a0 *pb.SignUpResponse, _a1 error) *UserServiceClient_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceClient_SignUp_Call) RunAndReturn(run func(context.Context, *pb.SignUpRequest, ...grpc.CallOption) (*pb.SignUpResponse, error)) *UserServiceClient_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceClient creates a new instance of UserServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceClient {
	mock := &UserServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
