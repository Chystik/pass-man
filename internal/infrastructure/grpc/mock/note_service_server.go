// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/Chystik/pass-man/internal/infrastructure/grpc"
	mock "github.com/stretchr/testify/mock"
)

// NoteServiceServer is an autogenerated mock type for the NoteServiceServer type
type NoteServiceServer struct {
	mock.Mock
}

type NoteServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteServiceServer) EXPECT() *NoteServiceServer_Expecter {
	return &NoteServiceServer_Expecter{mock: &_m.Mock}
}

// AddNote provides a mock function with given fields: _a0, _a1
func (_m *NoteServiceServer) AddNote(_a0 context.Context, _a1 *pb.AddNoteRequest) (*pb.AddNoteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddNote")
	}

	var r0 *pb.AddNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddNoteRequest) (*pb.AddNoteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddNoteRequest) *pb.AddNoteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.AddNoteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceServer_AddNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNote'
type NoteServiceServer_AddNote_Call struct {
	*mock.Call
}

// AddNote is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.AddNoteRequest
func (_e *NoteServiceServer_Expecter) AddNote(_a0 interface{}, _a1 interface{}) *NoteServiceServer_AddNote_Call {
	return &NoteServiceServer_AddNote_Call{Call: _e.mock.On("AddNote", _a0, _a1)}
}

func (_c *NoteServiceServer_AddNote_Call) Run(run func(_a0 context.Context, _a1 *pb.AddNoteRequest)) *NoteServiceServer_AddNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.AddNoteRequest))
	})
	return _c
}

func (_c *NoteServiceServer_AddNote_Call) Return(_a0 *pb.AddNoteResponse, _a1 error) *NoteServiceServer_AddNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceServer_AddNote_Call) RunAndReturn(run func(context.Context, *pb.AddNoteRequest) (*pb.AddNoteResponse, error)) *NoteServiceServer_AddNote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNote provides a mock function with given fields: _a0, _a1
func (_m *NoteServiceServer) DeleteNote(_a0 context.Context, _a1 *pb.DeleteNoteRequest) (*pb.DeleteNoteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 *pb.DeleteNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteNoteRequest) (*pb.DeleteNoteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteNoteRequest) *pb.DeleteNoteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteNoteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceServer_DeleteNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNote'
type NoteServiceServer_DeleteNote_Call struct {
	*mock.Call
}

// DeleteNote is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.DeleteNoteRequest
func (_e *NoteServiceServer_Expecter) DeleteNote(_a0 interface{}, _a1 interface{}) *NoteServiceServer_DeleteNote_Call {
	return &NoteServiceServer_DeleteNote_Call{Call: _e.mock.On("DeleteNote", _a0, _a1)}
}

func (_c *NoteServiceServer_DeleteNote_Call) Run(run func(_a0 context.Context, _a1 *pb.DeleteNoteRequest)) *NoteServiceServer_DeleteNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.DeleteNoteRequest))
	})
	return _c
}

func (_c *NoteServiceServer_DeleteNote_Call) Return(_a0 *pb.DeleteNoteResponse, _a1 error) *NoteServiceServer_DeleteNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceServer_DeleteNote_Call) RunAndReturn(run func(context.Context, *pb.DeleteNoteRequest) (*pb.DeleteNoteResponse, error)) *NoteServiceServer_DeleteNote_Call {
	_c.Call.Return(run)
	return _c
}

// GetNote provides a mock function with given fields: _a0, _a1
func (_m *NoteServiceServer) GetNote(_a0 context.Context, _a1 *pb.GetNoteRequest) (*pb.GetNoteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetNote")
	}

	var r0 *pb.GetNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetNoteRequest) (*pb.GetNoteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetNoteRequest) *pb.GetNoteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetNoteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceServer_GetNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNote'
type NoteServiceServer_GetNote_Call struct {
	*mock.Call
}

// GetNote is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.GetNoteRequest
func (_e *NoteServiceServer_Expecter) GetNote(_a0 interface{}, _a1 interface{}) *NoteServiceServer_GetNote_Call {
	return &NoteServiceServer_GetNote_Call{Call: _e.mock.On("GetNote", _a0, _a1)}
}

func (_c *NoteServiceServer_GetNote_Call) Run(run func(_a0 context.Context, _a1 *pb.GetNoteRequest)) *NoteServiceServer_GetNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.GetNoteRequest))
	})
	return _c
}

func (_c *NoteServiceServer_GetNote_Call) Return(_a0 *pb.GetNoteResponse, _a1 error) *NoteServiceServer_GetNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceServer_GetNote_Call) RunAndReturn(run func(context.Context, *pb.GetNoteRequest) (*pb.GetNoteResponse, error)) *NoteServiceServer_GetNote_Call {
	_c.Call.Return(run)
	return _c
}

// ListNote provides a mock function with given fields: _a0, _a1
func (_m *NoteServiceServer) ListNote(_a0 context.Context, _a1 *pb.ListNoteRequest) (*pb.ListNoteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListNote")
	}

	var r0 *pb.ListNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListNoteRequest) (*pb.ListNoteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListNoteRequest) *pb.ListNoteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListNoteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceServer_ListNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNote'
type NoteServiceServer_ListNote_Call struct {
	*mock.Call
}

// ListNote is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.ListNoteRequest
func (_e *NoteServiceServer_Expecter) ListNote(_a0 interface{}, _a1 interface{}) *NoteServiceServer_ListNote_Call {
	return &NoteServiceServer_ListNote_Call{Call: _e.mock.On("ListNote", _a0, _a1)}
}

func (_c *NoteServiceServer_ListNote_Call) Run(run func(_a0 context.Context, _a1 *pb.ListNoteRequest)) *NoteServiceServer_ListNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.ListNoteRequest))
	})
	return _c
}

func (_c *NoteServiceServer_ListNote_Call) Return(_a0 *pb.ListNoteResponse, _a1 error) *NoteServiceServer_ListNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceServer_ListNote_Call) RunAndReturn(run func(context.Context, *pb.ListNoteRequest) (*pb.ListNoteResponse, error)) *NoteServiceServer_ListNote_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedNoteServiceServer provides a mock function with given fields:
func (_m *NoteServiceServer) mustEmbedUnimplementedNoteServiceServer() {
	_m.Called()
}

// NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedNoteServiceServer'
type NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedNoteServiceServer is a helper method to define mock.On call
func (_e *NoteServiceServer_Expecter) mustEmbedUnimplementedNoteServiceServer() *NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call {
	return &NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedNoteServiceServer")}
}

func (_c *NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call) Run(run func()) *NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call) Return() *NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call) RunAndReturn(run func()) *NoteServiceServer_mustEmbedUnimplementedNoteServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewNoteServiceServer creates a new instance of NoteServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteServiceServer {
	mock := &NoteServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
