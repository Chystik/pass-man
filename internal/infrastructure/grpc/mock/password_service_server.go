// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/Chystik/pass-man/internal/infrastructure/grpc"
	mock "github.com/stretchr/testify/mock"
)

// PasswordServiceServer is an autogenerated mock type for the PasswordServiceServer type
type PasswordServiceServer struct {
	mock.Mock
}

type PasswordServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordServiceServer) EXPECT() *PasswordServiceServer_Expecter {
	return &PasswordServiceServer_Expecter{mock: &_m.Mock}
}

// AddPassword provides a mock function with given fields: _a0, _a1
func (_m *PasswordServiceServer) AddPassword(_a0 context.Context, _a1 *pb.AddPasswordRequest) (*pb.AddPasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddPassword")
	}

	var r0 *pb.AddPasswordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddPasswordRequest) (*pb.AddPasswordResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddPasswordRequest) *pb.AddPasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddPasswordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.AddPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordServiceServer_AddPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPassword'
type PasswordServiceServer_AddPassword_Call struct {
	*mock.Call
}

// AddPassword is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.AddPasswordRequest
func (_e *PasswordServiceServer_Expecter) AddPassword(_a0 interface{}, _a1 interface{}) *PasswordServiceServer_AddPassword_Call {
	return &PasswordServiceServer_AddPassword_Call{Call: _e.mock.On("AddPassword", _a0, _a1)}
}

func (_c *PasswordServiceServer_AddPassword_Call) Run(run func(_a0 context.Context, _a1 *pb.AddPasswordRequest)) *PasswordServiceServer_AddPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.AddPasswordRequest))
	})
	return _c
}

func (_c *PasswordServiceServer_AddPassword_Call) Return(_a0 *pb.AddPasswordResponse, _a1 error) *PasswordServiceServer_AddPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordServiceServer_AddPassword_Call) RunAndReturn(run func(context.Context, *pb.AddPasswordRequest) (*pb.AddPasswordResponse, error)) *PasswordServiceServer_AddPassword_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePassword provides a mock function with given fields: _a0, _a1
func (_m *PasswordServiceServer) DeletePassword(_a0 context.Context, _a1 *pb.DeletePasswordRequest) (*pb.DeletePasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeletePassword")
	}

	var r0 *pb.DeletePasswordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeletePasswordRequest) (*pb.DeletePasswordResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeletePasswordRequest) *pb.DeletePasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeletePasswordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeletePasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordServiceServer_DeletePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePassword'
type PasswordServiceServer_DeletePassword_Call struct {
	*mock.Call
}

// DeletePassword is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.DeletePasswordRequest
func (_e *PasswordServiceServer_Expecter) DeletePassword(_a0 interface{}, _a1 interface{}) *PasswordServiceServer_DeletePassword_Call {
	return &PasswordServiceServer_DeletePassword_Call{Call: _e.mock.On("DeletePassword", _a0, _a1)}
}

func (_c *PasswordServiceServer_DeletePassword_Call) Run(run func(_a0 context.Context, _a1 *pb.DeletePasswordRequest)) *PasswordServiceServer_DeletePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.DeletePasswordRequest))
	})
	return _c
}

func (_c *PasswordServiceServer_DeletePassword_Call) Return(_a0 *pb.DeletePasswordResponse, _a1 error) *PasswordServiceServer_DeletePassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordServiceServer_DeletePassword_Call) RunAndReturn(run func(context.Context, *pb.DeletePasswordRequest) (*pb.DeletePasswordResponse, error)) *PasswordServiceServer_DeletePassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetPassword provides a mock function with given fields: _a0, _a1
func (_m *PasswordServiceServer) GetPassword(_a0 context.Context, _a1 *pb.GetPasswordRequest) (*pb.GetPasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPassword")
	}

	var r0 *pb.GetPasswordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetPasswordRequest) (*pb.GetPasswordResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetPasswordRequest) *pb.GetPasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetPasswordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordServiceServer_GetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPassword'
type PasswordServiceServer_GetPassword_Call struct {
	*mock.Call
}

// GetPassword is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.GetPasswordRequest
func (_e *PasswordServiceServer_Expecter) GetPassword(_a0 interface{}, _a1 interface{}) *PasswordServiceServer_GetPassword_Call {
	return &PasswordServiceServer_GetPassword_Call{Call: _e.mock.On("GetPassword", _a0, _a1)}
}

func (_c *PasswordServiceServer_GetPassword_Call) Run(run func(_a0 context.Context, _a1 *pb.GetPasswordRequest)) *PasswordServiceServer_GetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.GetPasswordRequest))
	})
	return _c
}

func (_c *PasswordServiceServer_GetPassword_Call) Return(_a0 *pb.GetPasswordResponse, _a1 error) *PasswordServiceServer_GetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordServiceServer_GetPassword_Call) RunAndReturn(run func(context.Context, *pb.GetPasswordRequest) (*pb.GetPasswordResponse, error)) *PasswordServiceServer_GetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ListPassword provides a mock function with given fields: _a0, _a1
func (_m *PasswordServiceServer) ListPassword(_a0 context.Context, _a1 *pb.ListPasswordRequest) (*pb.ListPasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListPassword")
	}

	var r0 *pb.ListPasswordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListPasswordRequest) (*pb.ListPasswordResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListPasswordRequest) *pb.ListPasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListPasswordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordServiceServer_ListPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPassword'
type PasswordServiceServer_ListPassword_Call struct {
	*mock.Call
}

// ListPassword is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.ListPasswordRequest
func (_e *PasswordServiceServer_Expecter) ListPassword(_a0 interface{}, _a1 interface{}) *PasswordServiceServer_ListPassword_Call {
	return &PasswordServiceServer_ListPassword_Call{Call: _e.mock.On("ListPassword", _a0, _a1)}
}

func (_c *PasswordServiceServer_ListPassword_Call) Run(run func(_a0 context.Context, _a1 *pb.ListPasswordRequest)) *PasswordServiceServer_ListPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.ListPasswordRequest))
	})
	return _c
}

func (_c *PasswordServiceServer_ListPassword_Call) Return(_a0 *pb.ListPasswordResponse, _a1 error) *PasswordServiceServer_ListPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordServiceServer_ListPassword_Call) RunAndReturn(run func(context.Context, *pb.ListPasswordRequest) (*pb.ListPasswordResponse, error)) *PasswordServiceServer_ListPassword_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedPasswordServiceServer provides a mock function with given fields:
func (_m *PasswordServiceServer) mustEmbedUnimplementedPasswordServiceServer() {
	_m.Called()
}

// PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedPasswordServiceServer'
type PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedPasswordServiceServer is a helper method to define mock.On call
func (_e *PasswordServiceServer_Expecter) mustEmbedUnimplementedPasswordServiceServer() *PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call {
	return &PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedPasswordServiceServer")}
}

func (_c *PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call) Run(run func()) *PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call) Return() *PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call) RunAndReturn(run func()) *PasswordServiceServer_mustEmbedUnimplementedPasswordServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordServiceServer creates a new instance of PasswordServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordServiceServer {
	mock := &PasswordServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
