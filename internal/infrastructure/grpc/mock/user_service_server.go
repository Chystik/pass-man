// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/Chystik/pass-man/internal/infrastructure/grpc"
	mock "github.com/stretchr/testify/mock"
)

// UserServiceServer is an autogenerated mock type for the UserServiceServer type
type UserServiceServer struct {
	mock.Mock
}

type UserServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceServer) EXPECT() *UserServiceServer_Expecter {
	return &UserServiceServer_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) Login(_a0 context.Context, _a1 *pb.LoginRequest) (*pb.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *pb.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest) (*pb.LoginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.LoginRequest) *pb.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceServer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type UserServiceServer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.LoginRequest
func (_e *UserServiceServer_Expecter) Login(_a0 interface{}, _a1 interface{}) *UserServiceServer_Login_Call {
	return &UserServiceServer_Login_Call{Call: _e.mock.On("Login", _a0, _a1)}
}

func (_c *UserServiceServer_Login_Call) Run(run func(_a0 context.Context, _a1 *pb.LoginRequest)) *UserServiceServer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.LoginRequest))
	})
	return _c
}

func (_c *UserServiceServer_Login_Call) Return(_a0 *pb.LoginResponse, _a1 error) *UserServiceServer_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceServer_Login_Call) RunAndReturn(run func(context.Context, *pb.LoginRequest) (*pb.LoginResponse, error)) *UserServiceServer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: _a0, _a1
func (_m *UserServiceServer) SignUp(_a0 context.Context, _a1 *pb.SignUpRequest) (*pb.SignUpResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 *pb.SignUpResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignUpRequest) (*pb.SignUpResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SignUpRequest) *pb.SignUpResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SignUpResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.SignUpRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceServer_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type UserServiceServer_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.SignUpRequest
func (_e *UserServiceServer_Expecter) SignUp(_a0 interface{}, _a1 interface{}) *UserServiceServer_SignUp_Call {
	return &UserServiceServer_SignUp_Call{Call: _e.mock.On("SignUp", _a0, _a1)}
}

func (_c *UserServiceServer_SignUp_Call) Run(run func(_a0 context.Context, _a1 *pb.SignUpRequest)) *UserServiceServer_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.SignUpRequest))
	})
	return _c
}

func (_c *UserServiceServer_SignUp_Call) Return(_a0 *pb.SignUpResponse, _a1 error) *UserServiceServer_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceServer_SignUp_Call) RunAndReturn(run func(context.Context, *pb.SignUpRequest) (*pb.SignUpResponse, error)) *UserServiceServer_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedUserServiceServer provides a mock function with given fields:
func (_m *UserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	_m.Called()
}

// UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedUserServiceServer'
type UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedUserServiceServer is a helper method to define mock.On call
func (_e *UserServiceServer_Expecter) mustEmbedUnimplementedUserServiceServer() *UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	return &UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedUserServiceServer")}
}

func (_c *UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) Run(run func()) *UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) Return() *UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call) RunAndReturn(run func()) *UserServiceServer_mustEmbedUnimplementedUserServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceServer creates a new instance of UserServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceServer {
	mock := &UserServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
