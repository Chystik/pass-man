// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/Chystik/pass-man/internal/infrastructure/grpc"
)

// CardServiceClient is an autogenerated mock type for the CardServiceClient type
type CardServiceClient struct {
	mock.Mock
}

type CardServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CardServiceClient) EXPECT() *CardServiceClient_Expecter {
	return &CardServiceClient_Expecter{mock: &_m.Mock}
}

// AddCard provides a mock function with given fields: ctx, in, opts
func (_m *CardServiceClient) AddCard(ctx context.Context, in *pb.AddCardRequest, opts ...grpc.CallOption) (*pb.AddCardResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddCard")
	}

	var r0 *pb.AddCardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddCardRequest, ...grpc.CallOption) (*pb.AddCardResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddCardRequest, ...grpc.CallOption) *pb.AddCardResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddCardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.AddCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardServiceClient_AddCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCard'
type CardServiceClient_AddCard_Call struct {
	*mock.Call
}

// AddCard is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.AddCardRequest
//   - opts ...grpc.CallOption
func (_e *CardServiceClient_Expecter) AddCard(ctx interface{}, in interface{}, opts ...interface{}) *CardServiceClient_AddCard_Call {
	return &CardServiceClient_AddCard_Call{Call: _e.mock.On("AddCard",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CardServiceClient_AddCard_Call) Run(run func(ctx context.Context, in *pb.AddCardRequest, opts ...grpc.CallOption)) *CardServiceClient_AddCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.AddCardRequest), variadicArgs...)
	})
	return _c
}

func (_c *CardServiceClient_AddCard_Call) Return(_a0 *pb.AddCardResponse, _a1 error) *CardServiceClient_AddCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardServiceClient_AddCard_Call) RunAndReturn(run func(context.Context, *pb.AddCardRequest, ...grpc.CallOption) (*pb.AddCardResponse, error)) *CardServiceClient_AddCard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCard provides a mock function with given fields: ctx, in, opts
func (_m *CardServiceClient) DeleteCard(ctx context.Context, in *pb.DeleteCardRequest, opts ...grpc.CallOption) (*pb.DeleteCardResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCard")
	}

	var r0 *pb.DeleteCardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteCardRequest, ...grpc.CallOption) (*pb.DeleteCardResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteCardRequest, ...grpc.CallOption) *pb.DeleteCardResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteCardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardServiceClient_DeleteCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCard'
type CardServiceClient_DeleteCard_Call struct {
	*mock.Call
}

// DeleteCard is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.DeleteCardRequest
//   - opts ...grpc.CallOption
func (_e *CardServiceClient_Expecter) DeleteCard(ctx interface{}, in interface{}, opts ...interface{}) *CardServiceClient_DeleteCard_Call {
	return &CardServiceClient_DeleteCard_Call{Call: _e.mock.On("DeleteCard",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CardServiceClient_DeleteCard_Call) Run(run func(ctx context.Context, in *pb.DeleteCardRequest, opts ...grpc.CallOption)) *CardServiceClient_DeleteCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.DeleteCardRequest), variadicArgs...)
	})
	return _c
}

func (_c *CardServiceClient_DeleteCard_Call) Return(_a0 *pb.DeleteCardResponse, _a1 error) *CardServiceClient_DeleteCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardServiceClient_DeleteCard_Call) RunAndReturn(run func(context.Context, *pb.DeleteCardRequest, ...grpc.CallOption) (*pb.DeleteCardResponse, error)) *CardServiceClient_DeleteCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCard provides a mock function with given fields: ctx, in, opts
func (_m *CardServiceClient) GetCard(ctx context.Context, in *pb.GetCardRequest, opts ...grpc.CallOption) (*pb.GetCardResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCard")
	}

	var r0 *pb.GetCardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCardRequest, ...grpc.CallOption) (*pb.GetCardResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCardRequest, ...grpc.CallOption) *pb.GetCardResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardServiceClient_GetCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCard'
type CardServiceClient_GetCard_Call struct {
	*mock.Call
}

// GetCard is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.GetCardRequest
//   - opts ...grpc.CallOption
func (_e *CardServiceClient_Expecter) GetCard(ctx interface{}, in interface{}, opts ...interface{}) *CardServiceClient_GetCard_Call {
	return &CardServiceClient_GetCard_Call{Call: _e.mock.On("GetCard",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CardServiceClient_GetCard_Call) Run(run func(ctx context.Context, in *pb.GetCardRequest, opts ...grpc.CallOption)) *CardServiceClient_GetCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.GetCardRequest), variadicArgs...)
	})
	return _c
}

func (_c *CardServiceClient_GetCard_Call) Return(_a0 *pb.GetCardResponse, _a1 error) *CardServiceClient_GetCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardServiceClient_GetCard_Call) RunAndReturn(run func(context.Context, *pb.GetCardRequest, ...grpc.CallOption) (*pb.GetCardResponse, error)) *CardServiceClient_GetCard_Call {
	_c.Call.Return(run)
	return _c
}

// ListCard provides a mock function with given fields: ctx, in, opts
func (_m *CardServiceClient) ListCard(ctx context.Context, in *pb.ListCardRequest, opts ...grpc.CallOption) (*pb.ListCardResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCard")
	}

	var r0 *pb.ListCardResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListCardRequest, ...grpc.CallOption) (*pb.ListCardResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListCardRequest, ...grpc.CallOption) *pb.ListCardResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListCardResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListCardRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CardServiceClient_ListCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCard'
type CardServiceClient_ListCard_Call struct {
	*mock.Call
}

// ListCard is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.ListCardRequest
//   - opts ...grpc.CallOption
func (_e *CardServiceClient_Expecter) ListCard(ctx interface{}, in interface{}, opts ...interface{}) *CardServiceClient_ListCard_Call {
	return &CardServiceClient_ListCard_Call{Call: _e.mock.On("ListCard",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *CardServiceClient_ListCard_Call) Run(run func(ctx context.Context, in *pb.ListCardRequest, opts ...grpc.CallOption)) *CardServiceClient_ListCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.ListCardRequest), variadicArgs...)
	})
	return _c
}

func (_c *CardServiceClient_ListCard_Call) Return(_a0 *pb.ListCardResponse, _a1 error) *CardServiceClient_ListCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CardServiceClient_ListCard_Call) RunAndReturn(run func(context.Context, *pb.ListCardRequest, ...grpc.CallOption) (*pb.ListCardResponse, error)) *CardServiceClient_ListCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewCardServiceClient creates a new instance of CardServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCardServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CardServiceClient {
	mock := &CardServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
