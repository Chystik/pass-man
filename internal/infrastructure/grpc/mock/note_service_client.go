// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/Chystik/pass-man/internal/infrastructure/grpc"
)

// NoteServiceClient is an autogenerated mock type for the NoteServiceClient type
type NoteServiceClient struct {
	mock.Mock
}

type NoteServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NoteServiceClient) EXPECT() *NoteServiceClient_Expecter {
	return &NoteServiceClient_Expecter{mock: &_m.Mock}
}

// AddNote provides a mock function with given fields: ctx, in, opts
func (_m *NoteServiceClient) AddNote(ctx context.Context, in *pb.AddNoteRequest, opts ...grpc.CallOption) (*pb.AddNoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddNote")
	}

	var r0 *pb.AddNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddNoteRequest, ...grpc.CallOption) (*pb.AddNoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.AddNoteRequest, ...grpc.CallOption) *pb.AddNoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.AddNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.AddNoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceClient_AddNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNote'
type NoteServiceClient_AddNote_Call struct {
	*mock.Call
}

// AddNote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.AddNoteRequest
//   - opts ...grpc.CallOption
func (_e *NoteServiceClient_Expecter) AddNote(ctx interface{}, in interface{}, opts ...interface{}) *NoteServiceClient_AddNote_Call {
	return &NoteServiceClient_AddNote_Call{Call: _e.mock.On("AddNote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NoteServiceClient_AddNote_Call) Run(run func(ctx context.Context, in *pb.AddNoteRequest, opts ...grpc.CallOption)) *NoteServiceClient_AddNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.AddNoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *NoteServiceClient_AddNote_Call) Return(_a0 *pb.AddNoteResponse, _a1 error) *NoteServiceClient_AddNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceClient_AddNote_Call) RunAndReturn(run func(context.Context, *pb.AddNoteRequest, ...grpc.CallOption) (*pb.AddNoteResponse, error)) *NoteServiceClient_AddNote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNote provides a mock function with given fields: ctx, in, opts
func (_m *NoteServiceClient) DeleteNote(ctx context.Context, in *pb.DeleteNoteRequest, opts ...grpc.CallOption) (*pb.DeleteNoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 *pb.DeleteNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteNoteRequest, ...grpc.CallOption) (*pb.DeleteNoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteNoteRequest, ...grpc.CallOption) *pb.DeleteNoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteNoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceClient_DeleteNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNote'
type NoteServiceClient_DeleteNote_Call struct {
	*mock.Call
}

// DeleteNote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.DeleteNoteRequest
//   - opts ...grpc.CallOption
func (_e *NoteServiceClient_Expecter) DeleteNote(ctx interface{}, in interface{}, opts ...interface{}) *NoteServiceClient_DeleteNote_Call {
	return &NoteServiceClient_DeleteNote_Call{Call: _e.mock.On("DeleteNote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NoteServiceClient_DeleteNote_Call) Run(run func(ctx context.Context, in *pb.DeleteNoteRequest, opts ...grpc.CallOption)) *NoteServiceClient_DeleteNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.DeleteNoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *NoteServiceClient_DeleteNote_Call) Return(_a0 *pb.DeleteNoteResponse, _a1 error) *NoteServiceClient_DeleteNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceClient_DeleteNote_Call) RunAndReturn(run func(context.Context, *pb.DeleteNoteRequest, ...grpc.CallOption) (*pb.DeleteNoteResponse, error)) *NoteServiceClient_DeleteNote_Call {
	_c.Call.Return(run)
	return _c
}

// GetNote provides a mock function with given fields: ctx, in, opts
func (_m *NoteServiceClient) GetNote(ctx context.Context, in *pb.GetNoteRequest, opts ...grpc.CallOption) (*pb.GetNoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNote")
	}

	var r0 *pb.GetNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetNoteRequest, ...grpc.CallOption) (*pb.GetNoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetNoteRequest, ...grpc.CallOption) *pb.GetNoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetNoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceClient_GetNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNote'
type NoteServiceClient_GetNote_Call struct {
	*mock.Call
}

// GetNote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.GetNoteRequest
//   - opts ...grpc.CallOption
func (_e *NoteServiceClient_Expecter) GetNote(ctx interface{}, in interface{}, opts ...interface{}) *NoteServiceClient_GetNote_Call {
	return &NoteServiceClient_GetNote_Call{Call: _e.mock.On("GetNote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NoteServiceClient_GetNote_Call) Run(run func(ctx context.Context, in *pb.GetNoteRequest, opts ...grpc.CallOption)) *NoteServiceClient_GetNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.GetNoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *NoteServiceClient_GetNote_Call) Return(_a0 *pb.GetNoteResponse, _a1 error) *NoteServiceClient_GetNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceClient_GetNote_Call) RunAndReturn(run func(context.Context, *pb.GetNoteRequest, ...grpc.CallOption) (*pb.GetNoteResponse, error)) *NoteServiceClient_GetNote_Call {
	_c.Call.Return(run)
	return _c
}

// ListNote provides a mock function with given fields: ctx, in, opts
func (_m *NoteServiceClient) ListNote(ctx context.Context, in *pb.ListNoteRequest, opts ...grpc.CallOption) (*pb.ListNoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNote")
	}

	var r0 *pb.ListNoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListNoteRequest, ...grpc.CallOption) (*pb.ListNoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListNoteRequest, ...grpc.CallOption) *pb.ListNoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListNoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListNoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NoteServiceClient_ListNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNote'
type NoteServiceClient_ListNote_Call struct {
	*mock.Call
}

// ListNote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.ListNoteRequest
//   - opts ...grpc.CallOption
func (_e *NoteServiceClient_Expecter) ListNote(ctx interface{}, in interface{}, opts ...interface{}) *NoteServiceClient_ListNote_Call {
	return &NoteServiceClient_ListNote_Call{Call: _e.mock.On("ListNote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NoteServiceClient_ListNote_Call) Run(run func(ctx context.Context, in *pb.ListNoteRequest, opts ...grpc.CallOption)) *NoteServiceClient_ListNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.ListNoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *NoteServiceClient_ListNote_Call) Return(_a0 *pb.ListNoteResponse, _a1 error) *NoteServiceClient_ListNote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NoteServiceClient_ListNote_Call) RunAndReturn(run func(context.Context, *pb.ListNoteRequest, ...grpc.CallOption) (*pb.ListNoteResponse, error)) *NoteServiceClient_ListNote_Call {
	_c.Call.Return(run)
	return _c
}

// NewNoteServiceClient creates a new instance of NoteServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteServiceClient {
	mock := &NoteServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
