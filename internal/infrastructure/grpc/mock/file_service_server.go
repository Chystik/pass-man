// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/Chystik/pass-man/internal/infrastructure/grpc"
	mock "github.com/stretchr/testify/mock"
)

// FileServiceServer is an autogenerated mock type for the FileServiceServer type
type FileServiceServer struct {
	mock.Mock
}

type FileServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *FileServiceServer) EXPECT() *FileServiceServer_Expecter {
	return &FileServiceServer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *FileServiceServer) Delete(_a0 context.Context, _a1 *pb.DeleteFileRequest) (*pb.DeleteFileResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *pb.DeleteFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteFileRequest) (*pb.DeleteFileResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.DeleteFileRequest) *pb.DeleteFileResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.DeleteFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.DeleteFileRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FileServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.DeleteFileRequest
func (_e *FileServiceServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *FileServiceServer_Delete_Call {
	return &FileServiceServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *FileServiceServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *pb.DeleteFileRequest)) *FileServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.DeleteFileRequest))
	})
	return _c
}

func (_c *FileServiceServer_Delete_Call) Return(_a0 *pb.DeleteFileResponse, _a1 error) *FileServiceServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileServiceServer_Delete_Call) RunAndReturn(run func(context.Context, *pb.DeleteFileRequest) (*pb.DeleteFileResponse, error)) *FileServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: _a0, _a1
func (_m *FileServiceServer) Download(_a0 *pb.DownloadFileRequest, _a1 pb.FileService_DownloadServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*pb.DownloadFileRequest, pb.FileService_DownloadServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileServiceServer_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type FileServiceServer_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - _a0 *pb.DownloadFileRequest
//   - _a1 pb.FileService_DownloadServer
func (_e *FileServiceServer_Expecter) Download(_a0 interface{}, _a1 interface{}) *FileServiceServer_Download_Call {
	return &FileServiceServer_Download_Call{Call: _e.mock.On("Download", _a0, _a1)}
}

func (_c *FileServiceServer_Download_Call) Run(run func(_a0 *pb.DownloadFileRequest, _a1 pb.FileService_DownloadServer)) *FileServiceServer_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pb.DownloadFileRequest), args[1].(pb.FileService_DownloadServer))
	})
	return _c
}

func (_c *FileServiceServer_Download_Call) Return(_a0 error) *FileServiceServer_Download_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileServiceServer_Download_Call) RunAndReturn(run func(*pb.DownloadFileRequest, pb.FileService_DownloadServer) error) *FileServiceServer_Download_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function with given fields: _a0, _a1
func (_m *FileServiceServer) ListFiles(_a0 context.Context, _a1 *pb.ListFileRequest) (*pb.ListFileResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 *pb.ListFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListFileRequest) (*pb.ListFileResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ListFileRequest) *pb.ListFileResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ListFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.ListFileRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileServiceServer_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type FileServiceServer_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *pb.ListFileRequest
func (_e *FileServiceServer_Expecter) ListFiles(_a0 interface{}, _a1 interface{}) *FileServiceServer_ListFiles_Call {
	return &FileServiceServer_ListFiles_Call{Call: _e.mock.On("ListFiles", _a0, _a1)}
}

func (_c *FileServiceServer_ListFiles_Call) Run(run func(_a0 context.Context, _a1 *pb.ListFileRequest)) *FileServiceServer_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.ListFileRequest))
	})
	return _c
}

func (_c *FileServiceServer_ListFiles_Call) Return(_a0 *pb.ListFileResponse, _a1 error) *FileServiceServer_ListFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileServiceServer_ListFiles_Call) RunAndReturn(run func(context.Context, *pb.ListFileRequest) (*pb.ListFileResponse, error)) *FileServiceServer_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: _a0
func (_m *FileServiceServer) Upload(_a0 pb.FileService_UploadServer) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(pb.FileService_UploadServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileServiceServer_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type FileServiceServer_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - _a0 pb.FileService_UploadServer
func (_e *FileServiceServer_Expecter) Upload(_a0 interface{}) *FileServiceServer_Upload_Call {
	return &FileServiceServer_Upload_Call{Call: _e.mock.On("Upload", _a0)}
}

func (_c *FileServiceServer_Upload_Call) Run(run func(_a0 pb.FileService_UploadServer)) *FileServiceServer_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pb.FileService_UploadServer))
	})
	return _c
}

func (_c *FileServiceServer_Upload_Call) Return(_a0 error) *FileServiceServer_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileServiceServer_Upload_Call) RunAndReturn(run func(pb.FileService_UploadServer) error) *FileServiceServer_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedFileServiceServer provides a mock function with given fields:
func (_m *FileServiceServer) mustEmbedUnimplementedFileServiceServer() {
	_m.Called()
}

// FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedFileServiceServer'
type FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedFileServiceServer is a helper method to define mock.On call
func (_e *FileServiceServer_Expecter) mustEmbedUnimplementedFileServiceServer() *FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call {
	return &FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedFileServiceServer")}
}

func (_c *FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call) Run(run func()) *FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call) Return() *FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call) RunAndReturn(run func()) *FileServiceServer_mustEmbedUnimplementedFileServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileServiceServer creates a new instance of FileServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileServiceServer {
	mock := &FileServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
